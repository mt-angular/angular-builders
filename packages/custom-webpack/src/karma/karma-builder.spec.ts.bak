jest.mock('../custom-webpack-builder');

import { CustomWebpackBuilder } from '../custom-webpack-builder';
import { normalize, Path, virtualFs } from '@angular-devkit/core';
import { NodeJsSyncHost } from '@angular-devkit/core/node';
import { CustomWebpackKarmaBuildSchema } from '../custom-webpack-schema';
import { BuilderContext, BuilderOutput } from '@angular-devkit/architect';
import * as path from 'path';
import * as fs from 'fs';
import { buildCustomWebpackKarma } from './index';
import { Workspace } from '@angular-devkit/core/src/experimental/workspace';
import { Configuration } from 'webpack';
import * as BuildAngular from '@angular-devkit/build-angular';
import { Schema } from '@angular-devkit/build-angular/src/browser/schema';
import { WebpackConfigOptions } from '@angular-devkit/build-angular/src/angular-cli-files/models/build-options';
import { NormalizedBrowserBuilderSchema } from '@angular-devkit/build-angular/src/utils';
import rewire from 'rewire';
import { ExecuteOnTempState } from '@upradata/browser-util';
import * as webpackBrowserConfig from '@angular-devkit/build-angular/src/utils/webpack-browser-config';
// tslint:disable-next-line: no-duplicate-imports
import { ExecutionTransformer } from '@angular-devkit/build-angular';
import webpack = require('webpack');
import { Observable } from 'rxjs';

const mockCustomWebpackBuilder = (buildWebpackConfigMock: jest.Mock<any, any>, customWebpackConfiguration: {}) => {
    // CustomWebpackBuilder.buildWebpackConfig = buildWebpackConfigMock;
    CustomWebpackBuilder.getWebpackConfig = jest.fn().mockReturnValue(customWebpackConfiguration);
};


type BrowserWebpackConfigOptions = WebpackConfigOptions<NormalizedBrowserBuilderSchema>;

function setWebpackBrowserConfigMock(baseWebpackConfig: Partial<Configuration>, asyncCallback: () => Promise<void>) {

    // tslint:disable-next-line: max-line-length
    function generateBrowserWebpackConfigFromContext(options: Schema, context: BuilderContext, webpackPartialGenerator: (wco: BrowserWebpackConfigOptions) => Configuration[], host?: virtualFs.Host<fs.Stats>): Promise<{
        workspace: Workspace;
        config: Configuration[];
    }> {

        const workspace = new Workspace('path/to/angular.json' as Path, new NodeJsSyncHost(), undefined); // registry


        return Promise.resolve({
            workspace,
            config: [ baseWebpackConfig ]
        });
    }

    const generateMock = jest.fn().mockImplementation(generateBrowserWebpackConfigFromContext);


    const oldExecute = BuildAngular.executeKarmaBuilder;

    function execute(options: BuildAngular.KarmaBuilderOptions = {} as any, context: BuilderContext, transforms?: {
        webpackConfiguration?: ExecutionTransformer<webpack.Configuration>;
        karmaOptions?: (options: BuildAngular.KarmaConfigOptions) => BuildAngular.KarmaConfigOptions;
    }): Observable<BuilderOutput> {

        return oldExecute({ ...options, karmaConfig: 'karma.conf.js' }, context, transforms);
    }

    const executeMock = jest.fn().mockImplementation(execute);


    return new ExecuteOnTempState().state({ obj: BuildAngular, tmpState: { executeKarmaBuilder: executeMock } }).execute(
        async () =>
            new ExecuteOnTempState().state({
                obj: webpackBrowserConfig,
                tmpState: { generateBrowserWebpackConfigFromContext: generateMock }
            })
                .execute(asyncCallback)
    );

    /* return new ExecuteOnTempState().state({ obj: webpackBrowserConfig, tmpState: { generateBrowserWebpackConfigFromContext: generateMock } })
        .execute(async () => await asyncCallback()); */
}

/* const commonConfig = { common: 1 };
const stylesConfig = { styles: 2 };
const nonAotTestConfig = { nonAotTest: 3 };
const testConfig = { test: 4 };

// Mock angular configs to avoid unnecessary computations and sandbox the test
jest.mock('@angular-devkit/build-angular/src/angular-cli-files/models/webpack-configs', () => ({
    getCommonConfig: wco => commonConfig,
    getStylesConfig: wco => stylesConfig,
    getNonAotTestConfig: wco => nonAotTestConfig,
    getTestConfig: wco => testConfig
}));
 */

/* const buildAngularKarma = rewire('@angular-devkit/build-angular');
let revert: () => void = undefined;

// import { buildCustomWebpackKarma } from './index';
const { buildCustomWebpackKarma } = require('./index');

function setInitializeMock(baseWebpackConfig: Partial<KarmaBuilderOptions>) {
    async function initialize(options: KarmaBuilderOptions, context: BuilderContext, webpackConfigurationTransformer: ExecutionTransformer<Configuration>) {

        const workspace = new Workspace('path/to/angular.json' as Path, new NodeJsSyncHost(), undefined ); // registry
const karma = require('karma');
return [
    workspace,
    karma,
    webpackConfigurationTransformer ? await webpackConfigurationTransformer(baseWebpackConfig) : baseWebpackConfig
];
    }


if (revert) revert();

revert = buildAngularKarma.__set__({ initialize });
} * /

/* 
jest.mock('@angular-devkit/build-angular/src/karma', () => ({
    getCommonConfig: () => commonConfig,
    getStylesConfig: () => stylesConfig,
    getNonAotTestConfig: () => nonAotTestConfig,
    getTestConfig: () => testConfig,
})); */

describe.only('Custom webpack karma builder test', () => {

    it('Should merge custom webpack config with the default one', () => {
        // const angularConfigs = { ...commonConfig, ...stylesConfig, ...nonAotTestConfig, ...testConfig };
        // const baseWebpackConfig = { common: 1, styles: [ 'style.css' ], nonAotTest: 3, test: 4 };
        const baseWebpackConfig: Partial<Configuration> = { entry: 'test', mode: 'development', parallelism: 10 };

        return setWebpackBrowserConfigMock(baseWebpackConfig, async () => {
            const customConfig = { prop: 'What a cool config' };
            const mergedConfig = { ...baseWebpackConfig, ...customConfig };

            const options = { customWebpackConfig: { path: 'custom.webpack.js' }, tsConfig: 'tsconfig.karma.json' } as CustomWebpackKarmaBuildSchema;

            const buildWebpackConfigMock = jest.fn().mockReturnValue(mergedConfig);
            mockCustomWebpackBuilder(buildWebpackConfigMock, customConfig);

            const builderContext = { workspaceRoot: path.join(__dirname, 'angular.json') } as BuilderContext;
            const config = await buildCustomWebpackKarma(options, builderContext).toPromise();

            // const builderParameters = { ...param, browserBuilderInstance };
            expect(buildWebpackConfigMock).toHaveBeenCalledWith(
                { ...builderContext, workspaceRoot: normalize(builderContext.workspaceRoot) },
                options,
                expect.any(Object));

            expect(config).toEqual(mergedConfig);
        });
    });
});
